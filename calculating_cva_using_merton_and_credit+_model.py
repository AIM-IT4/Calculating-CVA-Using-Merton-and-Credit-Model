# -*- coding: utf-8 -*-
"""Calculating CVA Using Merton and Credit+ Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LTpVryTW28XIjh6XOX2t6o8sFUtmuBuI
"""

import numpy as np
from scipy.stats import norm

# Hypothetical bank data
bank_name = "ABC Bank"
derivative_value = 1000000
time_horizon = 1
recovery_rate = 0.6
risk_free_rate = 0.055
volatility = 0.3
credit_spread = 0.03

# Merton model
def merton_model(derivative_value, time_horizon, recovery_rate, risk_free_rate, volatility, credit_spread):
    # Calculate the asset value
    asset_value = derivative_value / (1 - recovery_rate)
    # Calculate the standard deviation of the asset value
    asset_std = volatility * np.sqrt(time_horizon)
    # Calculate the distance to default
    distance_to_default = (np.log(asset_value / derivative_value) + (risk_free_rate + credit_spread + 0.5 * volatility ** 2) * time_horizon) / asset_std
    # Calculate the probability of default
    prob_default = norm.cdf(-distance_to_default)
    return prob_default

# CreditRisk+ model
def creditrisk_model(derivative_value, time_horizon, recovery_rate, risk_free_rate, volatility, credit_spread):
    # Calculate the expected loss given default
    expected_loss = derivative_value * (1 - recovery_rate) * norm.cdf(norm.ppf(1 - credit_spread) - (volatility * np.sqrt(time_horizon)) / np.sqrt(1 - correlation))
    # Calculate the probability of default
    prob_default = norm.cdf((norm.ppf(1 - credit_spread) - np.sqrt(correlation) * norm.ppf(expected_loss / derivative_value)) / np.sqrt(1 - correlation))
    return prob_default

# Calculate the CVA using the Merton model
prob_default_merton = merton_model(derivative_value, time_horizon, recovery_rate, risk_free_rate, volatility, credit_spread)
CVA_merton = derivative_value * (1 - recovery_rate) * prob_default_merton

# Calculate the CVA using the CreditRisk+ model
correlation = 0.2 # hypothetical correlation value
prob_default_creditrisk = creditrisk_model(derivative_value, time_horizon, recovery_rate, risk_free_rate, volatility, credit_spread)
CVA_creditrisk = derivative_value * (1 - recovery_rate) * prob_default_creditrisk

# Output the results
print(f"Bank: {bank_name}")
print(f"Derivative Value: {derivative_value}")
print(f"Recovery Rate: {recovery_rate}")
print(f"Risk-Free Rate: {risk_free_rate}")
print(f"Volatility: {volatility}")
print(f"Credit Spread: {credit_spread}")
print(f"Time Horizon: {time_horizon}")
print(f"Correlation: {correlation}")
print(f"CVA (Merton): {CVA_merton}")
print(f"CVA (CreditRisk+): {CVA_creditrisk}")